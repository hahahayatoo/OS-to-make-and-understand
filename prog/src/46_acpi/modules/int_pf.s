int_pf:
        ;---------------------------------------
        ; 【スタックフレームの構築】
        ;---------------------------------------
                                                ; EBP + 12| エラーコード
                                                ; EBP +  8| EIP（戻り番地）
                                                ; EBP +  4| CS
        push    ebp                             ; EBP +  0| EBP（元の値）
        mov     ebp, esp                        ; ------------------------

        ;---------------------------------------
        ; 【レジスタの保存】
        ;---------------------------------------
        pusha
        push    ds
        push    es

        ;---------------------------------------
        ; データ用セグメントの設定
        ;---------------------------------------
        mov     ax, 0x0010
        mov     ds, ax
        mov     es, ax

        ;---------------------------------------
        ; 例外を生成したアドレスの確認
        ;---------------------------------------
        mov     eax, cr2                        ; ページフォルト例外の要因となったアドレスをCR2レジスタから取得
        and     eax, ~0x0FFF                    ; 4Kバイト以内のアクセス（CR2レジスタから取得したアドレスの下位12ビットをマスク）
        cmp     eax, 0x0010_7000                ; ptr = アクセスアドレス
        jne     .10F

        ;---------------------------------------
        ; ページの有効化と描画パラメータの設定
        ;---------------------------------------
        mov     [0x00106000 + 0x107 * 4], dword 0x00107007
                                                ; ページの有効化
        cdecl   memcpy, 0x0010_7000, DRAW_PARAM, rose_size
                                                ; 描画パラメータ（タスク3用）
                                                ; 構造体名に _size をつけることで構造体が占めるバイト数が取得できる

        jmp     .10E

.10F:
        ;---------------------------------------
        ; スタックの調整
        ;---------------------------------------
        add     esp, 4                          ; pop es
        add     esp, 4                          ; pop ds
        popa
        pop     ebp

        ;---------------------------------------
        ; タスク終了処理
        ;---------------------------------------
        pushf                                   ; EFLAGS
        push    cs                              ; CS
        push    int_stop                        ; スタック表示処理

        mov     eax, .s0                        ; 割り込み種別
        iret

.10E:

        ;---------------------------------------
        ; 【レジスタの復帰】
        ;---------------------------------------
        pop     es
        pop     ds
        popa

        ;---------------------------------------
        ; 【スタックフレームの破棄】
        ;---------------------------------------
        mov     esp, ebp
        pop     ebp

        ;---------------------------------------
        ; エラーコードの破棄
        ;---------------------------------------
        add     esp, 4

        iret

.s0     db "<  PAGE FAULT  >", 0