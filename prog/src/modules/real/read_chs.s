read_chs:
        ;---------------------------------------
        ; 【スタックフレームの構築】
        ;---------------------------------------
                                                ; BP +8| コピー先
                                                ; BP +6| セクタ数
                                                ; BP +4| パラメータバッファ
                                                ; -----|----------
                                                ; BP +2| IP（戻り番地）
        push    bp                              ; BP +0| BP（元の値）
        mov     bp, sp                          ; -----|----------
        push    3                               ; BP -2| retry = 3; // リトライ回数
        push    0                               ; BP -4| sect = 0;  // 読み込みセクタ

        ;---------------------------------------
        ; 【レジスタの保存】
        ;---------------------------------------
        push    bx
        push    cx
        push    dx
        push    es
        push    si

        ;---------------------------------------
        ; 【処理の開始】
        ;---------------------------------------
        mov     si, [bp + 4]                    ; SI = SRCバッファ
        
        ;---------------------------------------
        ; CXレジスタの設定
        ; （BIOSコールの呼び出しに適した形"CHS形式"に変換）
        ;---------------------------------------
        mov     ch, [si + drive.cyln + 0]       ; CH = シリンダ番号（下位バイト）
        mov     cl, [si + drive.cyln + 1]       ; CL = シリンダ番号（上位バイト）
        shl     cl, 6                           ; CL <<= 6; 最上位2ビットにシフト
        or      cl, [si + drive.sect]           ; CL |= セクタ番号

        ;---------------------------------------
        ; セクタ読み込み
        ;---------------------------------------
        mov     dh, [si + drive.head]           ; DH = ヘッド番号
        mov     dl, [si + 0]                    ; DL = ドライブ番号
        mov     ax, 0x0000                      ; AX = 0x0000
        mov     es, ax                          ; ES = セグメント
        mov     bx, [bp + 8]                    ; BX = コピー先
.10L:                                           ;
        mov     ah, 0x02                        ; AH = セクタ読み出し
        mov     al, [bp + 6]                    ; AL = 読み込みセクタ数
                                                ;
        int     0x13                            ; BIOSコール（セクタ読み出し）
        jnc     .11E                            ; 成否判定（成功していればJMP）
                                                ;
        mov     al, 0                           ; 読み出しに失敗していれば
        jmp     .10E                            ; 読み出しセクタ数を0にして終了
.11E:                                           ;
        cmp     al, 0                           ; 
        jne     .10E                            ; 読み出せしたセクタがあれば終了
                                                ; 
        mov     ax, 0                           ; 読み出したセクタ数が0であればリトライ
        dec     word[bp - 2]                    ; リトライ回数を1減らす
        jnz     .10L                            ; 再度読み出しをトライ
.10E:                                           ;
        mov     ah, 0                           ; ステータス情報の破棄

        ;---------------------------------------
        ; レジスタの復帰
        ;---------------------------------------
        pop     si
        pop     es
        pop     dx
        pop     cx
        pop     bx

        ;---------------------------------------
        ; 【スタックフレームの破棄】
        ;---------------------------------------
        mov     sp, bp
        pop     bp

        ret