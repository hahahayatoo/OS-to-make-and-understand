itoa:
        ;---------------------------------------
        ; 【スタックフレームの構築】
        ;---------------------------------------
                                                ; BP  +0| BP（元の値）
                                                ; BP  +2| IP（戻り番地）
                                                ; BP  +4| 数値
                                                ; BP  +6| バッファアドレス
                                                ; BP  +8| バッファサイズ
        push    bp                              ; BP +10| 基数
        mov     bp, sp                          ; BP +12| フラグ
                                                ; -----|----------

        ;---------------------------------------
        ; 【レジスタの保存】
        ;---------------------------------------
        push    ax
        push    bx
        push    cx
        push    dx
        push    si
        push    di

        ;---------------------------------------
        ; 引数を取得
        ;---------------------------------------
        mov     ax, [bp + 4]                    ; val = 数値;
        mov     si, [bp + 6]                    ; dst = バッファアドレス;
        mov     cx, [bp + 8]                    ; size = バッファサイズ;

        mov     di, si                          ; // バッファの最後尾
        add     di, cx                          ; dst = &dst[size - 1];
        dec     di                              ;

        mov     bx, word [bp + 12]              ; flag = オプション;

        ;---------------------------------------
        ; 符号つき判定
        ;---------------------------------------
        test    bx, 0b0001                      ; オプションの最下位ビット（B0）から符号付き変数かを判定
.10Q:   je      .10E                            ;
        cmp     ax, 0                           ; 数値が負数か判定
.12Q:   jge     .12E                            ; 
        or      bx, 0b0010                      ; 負数の場合は符号を表示するようにB1を変更
.12E:
.10E:

        ;---------------------------------------
        ; 符号出力判定
        ;---------------------------------------
        test    bx, 0b0010                      ; オプションのB1から符号を出力するか判定
.20Q:   je      .20E                            ;
        cmp     ax, 0                           ; 数値が負数か判定
.22Q:   jge     .22F                            ;
        neg     ax                              ; 負数の場合は2の補数により符号を反転し
        mov     [si], byte '-'                  ; 出力する符号を'-'にする
        jmp     .22E                            ;
.22F:                                           ;
        mov     [si], byte '+'                  ; 正数の場合は出力する符号を'+'にする
.22E:                                           ;
        dec     cx                              ; 符号の分だけ残りのバッファサイズを減らす
.20E:                                           ;

        ;---------------------------------------
        ; ASCII変換
        ;---------------------------------------
        mov     bx, [bp + 10]                   ; BXに基数を格納
.30L:                                           ;
        mov     dx, 0                           ; DX = DX:AX % BX
        div     bx                              ; AX = DX:AX / BX
                                                ;
        mov     si, dx                          ; 変換テーブルを利用して表示する文字を取得
        mov     dl, byte [.ascii + si]          ; DL = ASCII[DX]
                                                ;
        mov     [di], dl                        ; *dst = DL
        dec     di                              ; dst--
                                                ;
        cmp     ax, 0                           ; AXが0で無ければ.30Lに戻る
        loopnz  .30L                            ;

        ;---------------------------------------
        ; 空白を埋める
        ;---------------------------------------
        cmp     cx, 0                           ; 残バッファサイズが0でなければ
.40Q:   je      .40E                            ; オプションのB2の値にしたがってバッファを埋める文字を決定する
        mov     al, ' '                         ; B2が0であれば' 'で埋めて
        cmp     [bp + 12], word 0b0100          ; 1であれば'0'で埋める
.42Q:   jne     .42E                            ;
        mov     al, '0'                         ;
.42E:                                           ;
        std                                     ; 
        rep stosb                               ; 残バッファサイズが0になるまで指定の文字でバッファを埋めていく
.40E:                                           ;

        ;---------------------------------------
        ; レジスタの復帰
        ;---------------------------------------
        pop     di
        pop     si
        pop     dx
        pop     cx
        pop     bx
        pop     ax

        ;---------------------------------------
        ; 【スタックフレームの破棄】
        ;---------------------------------------
        mov     sp, bp
        pop     bp

        ret

.ascii  db      "0123456789ABCDEF"              ; 変換テーブル