ring_rd:
        ;---------------------------------------
        ; 【スタックフレームの構築】
        ;---------------------------------------
                                                ; EBP + 12| 読み込んだデータの保存先アドレス
                                                ; EBP +  8| リングバッファ
                                                ; --------------------
        push    ebp                             ; EBP +  4| EIP（戻り番地）
        mov     ebp, esp                        ; EBP +  0| EBP（元の値）

        ;---------------------------------------
        ; 【レジスタの保存】
        ;---------------------------------------
        push    ebx
        push    esi
        push    edi

        ;---------------------------------------
        ; 引数を取得
        ;---------------------------------------
        mov     esi, [ebp + 8]                  ; ESI = リングバッファ
        mov     edi, [ebp + 12]                 ; EDI = データアドレス

        ;---------------------------------------
        ; 読み込み位置を確認
        ;---------------------------------------
        mov     eax, 0                          ; 戻り値：データの有無（無）
        mov     ebx, [esi + ring_buff.rp]       ; EBX = rp
        cmp     ebx, [esi + ring_buff.wp]       ; RPとWPを比較してリングバッファが空かチェック
        je      .10E                            ; 空であれば処理終了

        mov     al, [esi + ring_buff.item + ebx]
                                                ; AL = BUFF[rp] キーコードを保存
        mov     [edi], al                       ; [EDI] = AL データを保存

        inc     ebx                             ; EBX++ 読み込み位置を更新
        and     ebx, RING_INDEX_MASK            ; EBX &= 0x0F バッファサイズの制限
        mov     [esi + ring_buff.rp], ebx       ; rp = EBX 読み込み位置を保存

        mov     eax, 1                          ; 戻り値：データの有無（有）
.10E:

        ;---------------------------------------
        ; 【レジスタの復帰】
        ;---------------------------------------
        pop     edi
        pop     esi
        pop     ebx

        ;---------------------------------------
        ; 【スタックフレームの破棄】
        ;---------------------------------------
        mov     esp, ebp
        pop     ebp

        ret

ring_wr:
        ;---------------------------------------
        ; 【スタックフレームの構築】
        ;---------------------------------------
                                                ; EBP + 12| 書き込みデータ
                                                ; EBP +  8| リングバッファ
                                                ; --------------------
        push    ebp                             ; EBP +  4| EIP（戻り番地）
        mov     ebp, esp                        ; EBP +  0| EBP（元の値）

        ;---------------------------------------
        ; 【レジスタの保存】
        ;---------------------------------------
        push    ebx
        push    ecx
        push    esi

        ;---------------------------------------
        ; 引数を取得
        ;---------------------------------------
        mov     esi, [ebp + 8]                  ; リングバッファ

        ;---------------------------------------
        ; 書き込み位置を確認
        ;---------------------------------------
        mov     eax, 0                          ; 戻り値：書き込み成否（失敗）
        mov     ebx, [esi + ring_buff.wp]       ; EBX = wp 書き込み位置
        mov     ecx, ebx                        ; ECX = EBX
        inc     ecx                             ; ECX++ 書き込み位置の更新
        and     ecx, RING_INDEX_MASK            ; ECX &= 0x0F バッファサイズの制限

        cmp     ecx, [esi + ring_buff.rp]       ; RPと次の書き込み位置を比較してバッファフルかチェック
        je      .10E                            ; 同じであればバッファフルと判定して処理を終了する

        mov     al, [ebp + 12]                  ; AL = 書き込みデータ

        mov     [esi + ring_buff.item + ebx], al
                                                ; BUFF[wp] = AL キーコードの保存
        mov     [esi + ring_buff.wp], ecx       ; wp = ECX 書き込み位置の保存
        mov     eax, 1                          ; 戻り値：書き込み成否（成功）

.10E:

        ;---------------------------------------
        ; 【レジスタの復帰】
        ;---------------------------------------
        pop     esi
        pop     ecx
        pop     ebx

        ;---------------------------------------
        ; 【スタックフレームの破棄】
        ;---------------------------------------
        mov     esp, ebp
        pop     ebp

        ret

draw_key:
        ;---------------------------------------
        ; 【スタックフレームの構築】
        ;---------------------------------------
                                                ; EBP + 16| リングバッファ
                                                ; EBP + 12| Y（行）
                                                ; EBP +  8| X（列）
                                                ; --------------------
        push    ebp                             ; EBP +  4| EIP（戻り番地）
        mov     ebp, esp                        ; EBP +  0| EBP（元の値）

        ;---------------------------------------
        ; 【レジスタの保存】
        ;---------------------------------------
        pusha

        ;---------------------------------------
        ; 引数の取得
        ;---------------------------------------
        mov     edx, [ebp + 8]                  ; EBX = X（列）
        mov     edi, [ebp + 12]                 ; EDI = Y（行）
        mov     esi, [ebp + 16]                 ; ESI = リングバッファ

        ;---------------------------------------
        ; リングバッファの情報を取得
        ;---------------------------------------
        mov     ebx, [esi + ring_buff.rp]       ; EBX = wp 書き込み位置
        lea     esi, [esi + ring_buff.item]     ; ESI = &KEY_BUFF[EBX]
        mov     ecx, RING_ITEM_SIZE             ; ECX = RING_ITEM_SIZE 要素数

        ;---------------------------------------
        ; 文字列に変換しながら表示
        ;---------------------------------------
.10L:
        dec     ebx                             ; EBX-- 読み込み位置
        and     ebx, RING_INDEX_MASK            ; EBX &= RING_INDEX_MASK
        mov     al, [esi + ebx]                 ; EAX = KEY_BUFF[EBX]

        cdecl   itoa, eax, .tmp, 2, 16, 0b0100  ; キーコードを文字列に変換
        cdecl   draw_str, edx, edi, 0x02, .tmp  ; 変換した文字列を表示

        add     edx, 3                          ; 表示位置を更新（3文字分）

        loop    .10L

.10E:

        ;---------------------------------------
        ; 【レジスタの復帰】
        ;---------------------------------------
        popa

        ;---------------------------------------
        ; 【スタックフレームの破棄】
        ;---------------------------------------
        mov     esp, ebp
        pop     ebp

        ret

.tmp    db "-- ", 0