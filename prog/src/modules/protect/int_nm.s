int_nm:
        ;---------------------------------------
        ; 【レジスタの保存】
        ;---------------------------------------
        pusha
        push    ds
        push    es

        ;---------------------------------------
        ; カーネル用セレクタを設定
        ;---------------------------------------
        mov     ax, DS_KERNEL
        mov     ds, ax
        mov     es, ax

        ;---------------------------------------
        ; タスクスイッチフラグをクリア
        ;---------------------------------------
        clts                                    ; CR0.TS = 0

        ;---------------------------------------
        ; 前回/今回FPUを使用するタスク
        ;---------------------------------------
        mov     edi, [.last_tss]                ; EDI = 前回FPUを利用したタスクのTSS
        str     esi                             ; ESI = 今回FPUを利用するタスクのTSS
        and     esi, ~0x0007                    ; 特権レベルをマスク

        ;---------------------------------------
        ; FPUの初回利用をチェック
        ;---------------------------------------
        cmp     edi, 0                          ; FPUが初回利用の場合は
        je      .10F                            ; FPUを初期化

        cmp     esi, edi                        ; 前回と同じタスクの場合は
        je      .12E                            ; 現在のFPUコンテキストを利用する

                                                ; 上記以外の場合は、前回のFPUコンテキストを保存した後に
                                                ; 今回のFPUコンテキストを復帰する

        cli                                     ; 割り込み禁止

        ;---------------------------------------
        ; 前回のFPUコンテキストを保存
        ;---------------------------------------
        mov     ebx, edi                        ; 前回のタスク
        call    get_tss_base                    ; TSSアドレスを取得
        call    save_fpu_context                ; FPUのコンテキストを保存

        ;---------------------------------------
        ; 今回のFPUコンテキストを復帰
        ;---------------------------------------
        mov     ebx, esi                        ; 今回のタスク
        call    get_tss_base                    ; TSSアドレスを取得
        call    load_fpu_context                ; FPUのコンテキストを復帰

        sti                                     ; 割り込み許可

.12E:
        jmp     .10E                            ;

.10F:
        cli                                     ; 割り込み禁止

        ;---------------------------------------
        ; 今回のFPUコンテキストを復帰
        ;---------------------------------------
        mov     ebx, esi                        ; 今回のタスク
        call    get_tss_base                    ; TSSアドレスを取得
        call    load_fpu_context                ; FPUのコンテキストを復帰

        sti                                     ; 割り込み許可

.10E:
        mov     [.last_tss], esi                ; FPUを利用したタスクを保存

        ;---------------------------------------
        ; 【レジスタの復帰】
        ;---------------------------------------
        pop     es
        pop     ds
        popa

        iret

ALIGN 4,    db 0
.last_tss:  dd 0

get_tss_base:
        ;---------------------------------------
        ; EBXに設定されたTSSセレクタから
        ; TSSベースアドレスを取得
        ;---------------------------------------
        mov     eax, [GDT + ebx + 2]            ; EAX = TSS[23: 0]
        shl     eax, 8                          ; EAX <<= 8
        mov     al, [GDT + ebx + 7]             ; AL = TSS[31: 24]
        ror     eax, 8                          ; EAX >>= 8

        ret

load_fpu_context:
        cmp     [eax + 104 + 108], dword 0      ; 保存フラグを確認して
        jne     .10F                            ; セットされていればFPUコンテキストを復帰して
        fninit                                  ; セットされていなければFPUを初めて使ったのがこのタスクと判断して初期化
        jmp     .10E

.10F:
        frstor  [eax + 104]                      ; FPUコンテキストを復帰

.10E:
        ret

save_fpu_context:
        fnsave  [eax + 104]                     ; FPUコンテキストを保存
        mov     [eax + 104 + 108], dword 1      ; 保存フラグを立てる

        ret