itoa:
        ;---------------------------------------
        ; 【スタックフレームの構築】
        ;---------------------------------------
                                                ; EBP + 24| フラグ
                                                ; EBP + 20| 基数
                                                ; EBP + 16| バッファサイズ
                                                ; EBP + 12| バッファアドレス
                                                ; EBP +  8| 数値
                                                ; --------------------
        push    ebp                             ; EBP +  4| EIP（戻り番地）
        mov     ebp, esp                        ; EBP +  0| EBP（元の値）
                                                ; --------------------

        ;---------------------------------------
        ; 【レジスタの保存】
        ;---------------------------------------
        push    eax
        push    ebx
        push    ecx
        push    edx
        push    esi
        push    edi

        ;---------------------------------------
        ; 引数を取得
        ;---------------------------------------
        mov     eax, [ebp + 8]                  ; val = 数値;
        mov     esi, [ebp + 12]                 ; dst = バッファアドレス;
        mov     ecx, [ebp + 16]                 ; size = バッファサイズ;

        mov     edi, esi                        ; // バッファの最後尾
        add     edi, ecx                        ; dst = &dst[size - 1];
        dec     edi                             ;

        mov     ebx, [ebp + 24]                 ; flag = オプション;

        ;---------------------------------------
        ; 符号つき判定
        ;---------------------------------------
        test    ebx, 0b0001                     ; オプションの最下位ビット（B0）から符号付き変数かを判定
.10Q:   je      .10E                            ;
        cmp     eax, 0                          ; 数値が負数か判定
.12Q:   jge     .12E                            ;
        or      ebx, 0b0010                     ; 負数の場合は符号を表示するようにB1を変更
.12E:
.10E:

        ;---------------------------------------
        ; 符号出力判定
        ;---------------------------------------
        test    ebx, 0b0010                     ; オプションのB1から符号を出力するか判定
.20Q:   je      .20E                            ;
        cmp     eax, 0                          ; 数値が負数か判定
.22Q:   jge     .22F                            ;
        neg     eax                             ; 負数の場合は2の補数により符号を反転し
        mov     [esi], byte '-'                 ; 出力する符号を'-'にする
        jmp     .22E                            ;
.22F:                                           ;
        mov     [esi], byte '+'                 ; 正数の場合は出力する符号を'+'にする
.22E:                                           ;
        dec     ecx                             ; 符号の分だけ残りのバッファサイズを減らす
.20E:                                           ;

        ;---------------------------------------
        ; ASCII変換
        ;---------------------------------------
        mov     ebx, [ebp + 20]                 ; BXに基数を格納
.30L:                                           ;
        mov     edx, 0                          ; DX = DX:AX % BX
        div     ebx                             ; AX = DX:AX / BX
                                                ;
        mov     esi, edx                        ; 変換テーブルを利用して表示する文字を取得
        mov     dl, byte [.ascii + esi]         ; DL = ASCII[DX]
                                                ;
        mov     [edi], dl                       ; *dst = DL
        dec     edi                             ; dst--
                                                ;
        cmp     eax, 0                          ; AXが0で無ければ.30Lに戻る
        loopnz  .30L                            ;

        ;---------------------------------------
        ; 空白を埋める
        ;---------------------------------------
        cmp     ecx, 0                          ; 残バッファサイズが0でなければ
.40Q:   je      .40E                            ; オプションのB2の値にしたがってバッファを埋める文字を決定する
        mov     al, ' '                         ; B2が0であれば' 'で埋めて
        cmp     [ebp + 24], word 0b0100         ; 1であれば'0'で埋める
.42Q:   jne     .42E                            ;
        mov     al, '0'                         ;
.42E:                                           ;
        std                                     ;
        rep stosb                               ; 残バッファサイズが0になるまで指定の文字でバッファを埋めていく
.40E:                                           ;

        ;---------------------------------------
        ; レジスタの復帰
        ;---------------------------------------
        pop     edi
        pop     esi
        pop     edx
        pop     ecx
        pop     ebx
        pop     eax

        ;---------------------------------------
        ; 【スタックフレームの破棄】
        ;---------------------------------------
        mov     esp, ebp
        pop     ebp

        ret

.ascii  db      "0123456789ABCDEF"              ; 変換テーブル