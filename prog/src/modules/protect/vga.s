vga_set_read_plane:
        ;---------------------------------------
        ; 【スタックフレームの構築】
        ;---------------------------------------
                                                ; BP + 8| 読み込みプレーン
                                                ; BP + 4| IP（戻り番地）
        push    ebp                             ; BP + 0| BP（元の値）
        mov     ebp, esp                        ; ------|-----------

        ;---------------------------------------
        ; 【レジスタの保存】
        ;---------------------------------------
        push    eax
        push    edx

        ;---------------------------------------
        ; 読み込みプレーンの選択
        ;---------------------------------------
        mov     ah, [ebp + 8]                   ; AH = プレーンを選択（3=輝度, 2~0=RGB）
        and     ah, 0x03                        ; AH &= 0x03 // 不要なビットをマスク
        mov     al, 0x04                        ; AL = 読み込みマップ選択レジスタ
        mov     dx, 0x03CE                      ; DX = グラフィック制御ポート
        out     dx, ax                          ; ポート出力

        ;---------------------------------------
        ; 【レジスタの復帰】
        ;---------------------------------------
         pop    edx
         pop    eax

        ;---------------------------------------
        ; 【スタックフレームの破棄】
        ;---------------------------------------
        mov     esp, ebp
        pop     ebp

        ret

vga_set_write_plane:
        ;---------------------------------------
        ; 【スタックフレームの構築】
        ;---------------------------------------
                                                ; BP + 8| 書き込みプレーン
                                                ; BP + 4| IP（戻り番地）
        push    ebp                             ; BP + 0| BP（元の値）
        mov     ebp, esp                        ; ------|-----------

        ;---------------------------------------
        ; 【レジスタの保存】
        ;---------------------------------------
        push    eax
        push    edx

        ;---------------------------------------
        ; 書き込みプレーンの選択
        ;---------------------------------------
        mov     ah, [ebp + 8]                   ; AH = 書き込みプレーンを指定（Bit:----IRGB）
        and     ah, 0x0F                        ; AH &= 0x0F // 不要なビットをマスク
        mov     al, 0x02                        ; AL = マップマスクレジスタ（書き込みプレーンを指定）
        mov     dx, 0x03C4                      ; DX = シーケンサ制御ポート
        out     dx, ax                          ; ポート出力

        ;---------------------------------------
        ; 【レジスタの復帰】
        ;---------------------------------------
         pop    edx
         pop    eax

        ;---------------------------------------
        ; 【スタックフレームの破棄】
        ;---------------------------------------
        mov     esp, ebp
        pop     ebp

        ret

vram_font_copy:
        ;---------------------------------------
        ; 【スタックフレームの構築】
        ;---------------------------------------
                                                ; BP + 20| 描画色
                                                ; BP + 16| 出力プレーン（1つのプレーンのみをビットで指定）
                                                ; BP + 12| VRAMアドレス
                                                ; BP +  8| FONTアドレス
                                                ; BP +  4| IP（戻り番地）
        push    ebp                             ; BP +  0| BP（元の値）
        mov     ebp, esp                        ; ------|-----------

        ;---------------------------------------
        ; 【レジスタの保存】
        ;---------------------------------------
        push    eax
        push    ebx
        push    ecx
        push    edx
        push    esi
        push    edi

        ;---------------------------------------
        ; マスクデータの作成
        ;---------------------------------------
        mov     esi, [ebp + 8]                  ; ESI = フォントアドレス
        mov     edi, [ebp + 12]                 ; EDI = VRAMアドレス
        movzx   eax, byte [ebp + 16]            ; EAX = プレーン（ビット指定）
        movzx   ebx, word [ebp + 20]            ; EBX = 色

        test    bh, al                          ; ZF = (背景色 && プレーン)
        setz    dh                              ; AH = ZF ? 0x01 : 0x00
        dec     dh                              ; AH-- // 0x00 or 0xFF

        test    bl, al                          ; ZF = (前景色 && プレーン)
        setz    dl                              ; AH = ZF ? 0x01 : 0x00
        dec     dl                              ; AH-- // 0x00 or 0xFF

        ;---------------------------------------
        ; 16ドットフォントのコピー
        ;---------------------------------------
        cld                                     ; DF = 0

        mov     ecx, 16                         ; ECX = 16
.10L:
        ;---------------------------------------
        ; フォントマスクの作成
        ;---------------------------------------
        lodsb
        mov     ah, al                          ; AL = *ESI++ // フォント
        not     ah                              ; AH ~= AL // フォントのビット反転

        ;---------------------------------------
        ; 前景色
        ;---------------------------------------
        and     al, dl                          ; AL = 前景色 && フォント

        ;---------------------------------------
        ; 背景色
        ;---------------------------------------
        test    ebx, 0x0010                     ; 透過モードかどうかを判定
        jz      .11F                            ;
        and     ah, [edi]                       ; 透過モードなので AH = !フォント && [EDI]
        jmp     .11E

.11F:
        and     ah, dh                          ; 透過モードでないので AH = !フォント && 背景色

.11E:

        ;---------------------------------------
        ; 前景色と背景色を合成
        ;---------------------------------------
        or      al, ah                          ; AL = 背景 || 前景

        ;---------------------------------------
        ; 新しい値を出力
        ;---------------------------------------
        mov     [edi], al                       ; [EDI] = AL // プレーンに書き込む

        add     edi, 80                         ; EDI += 80
        loop    .10L
.10E:

        ;---------------------------------------
        ; 【レジスタの復帰】
        ;---------------------------------------
         pop    edi
         pop    esi
         pop    edx
         pop    ecx
         pop    ebx
         pop    eax

        ;---------------------------------------
        ; 【スタックフレームの破棄】
        ;---------------------------------------
        mov     esp, ebp
        pop     ebp

        ret